// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Article       Article[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model Article {
  id               Int        @id @default(autoincrement())
  title            String
  slug             String     @unique
  shortDescription String
  authorId         String
  author           User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content          String
  thumbnail        String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  activities       Activity[]
}

model Activity {
  id        Int             @id @default(autoincrement())
  articleId Int
  article   Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  action    ActivityTypeEnum
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

enum ActivityTypeEnum {
  VIEW_ARTICLE
  LIKE_ARTICLE
  SHARE_ARTICLE
}
